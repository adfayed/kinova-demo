# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jaco_fk/FKCheckRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FKCheckRequest(genpy.Message):
  _md5sum = "665ac09a6ac963a263289d78f765ccd4"
  _type = "jaco_fk/FKCheckRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 joint_1_req
float64 joint_2_req
float64 joint_3_req
float64 joint_4_req
float64 joint_5_req
float64 joint_6_req
"""
  __slots__ = ['joint_1_req','joint_2_req','joint_3_req','joint_4_req','joint_5_req','joint_6_req']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_1_req,joint_2_req,joint_3_req,joint_4_req,joint_5_req,joint_6_req

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FKCheckRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint_1_req is None:
        self.joint_1_req = 0.
      if self.joint_2_req is None:
        self.joint_2_req = 0.
      if self.joint_3_req is None:
        self.joint_3_req = 0.
      if self.joint_4_req is None:
        self.joint_4_req = 0.
      if self.joint_5_req is None:
        self.joint_5_req = 0.
      if self.joint_6_req is None:
        self.joint_6_req = 0.
    else:
      self.joint_1_req = 0.
      self.joint_2_req = 0.
      self.joint_3_req = 0.
      self.joint_4_req = 0.
      self.joint_5_req = 0.
      self.joint_6_req = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.joint_1_req, _x.joint_2_req, _x.joint_3_req, _x.joint_4_req, _x.joint_5_req, _x.joint_6_req))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint_1_req, _x.joint_2_req, _x.joint_3_req, _x.joint_4_req, _x.joint_5_req, _x.joint_6_req,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.joint_1_req, _x.joint_2_req, _x.joint_3_req, _x.joint_4_req, _x.joint_5_req, _x.joint_6_req))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint_1_req, _x.joint_2_req, _x.joint_3_req, _x.joint_4_req, _x.joint_5_req, _x.joint_6_req,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jaco_fk/FKCheckResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FKCheckResponse(genpy.Message):
  _md5sum = "386d400a9b9180bf5b31ccc793f8e539"
  _type = "jaco_fk/FKCheckResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool in_collision

"""
  __slots__ = ['in_collision']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       in_collision

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FKCheckResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.in_collision is None:
        self.in_collision = False
    else:
      self.in_collision = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.in_collision))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.in_collision,) = _get_struct_B().unpack(str[start:end])
      self.in_collision = bool(self.in_collision)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.in_collision))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.in_collision,) = _get_struct_B().unpack(str[start:end])
      self.in_collision = bool(self.in_collision)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class FKCheck(object):
  _type          = 'jaco_fk/FKCheck'
  _md5sum = '1640fd7a9e24c82d413046f60fbdc596'
  _request_class  = FKCheckRequest
  _response_class = FKCheckResponse
