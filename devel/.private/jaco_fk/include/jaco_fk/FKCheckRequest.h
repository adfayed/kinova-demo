// Generated by gencpp from file jaco_fk/FKCheckRequest.msg
// DO NOT EDIT!


#ifndef JACO_FK_MESSAGE_FKCHECKREQUEST_H
#define JACO_FK_MESSAGE_FKCHECKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaco_fk
{
template <class ContainerAllocator>
struct FKCheckRequest_
{
  typedef FKCheckRequest_<ContainerAllocator> Type;

  FKCheckRequest_()
    : joint_1_req(0.0)
    , joint_2_req(0.0)
    , joint_3_req(0.0)
    , joint_4_req(0.0)
    , joint_5_req(0.0)
    , joint_6_req(0.0)  {
    }
  FKCheckRequest_(const ContainerAllocator& _alloc)
    : joint_1_req(0.0)
    , joint_2_req(0.0)
    , joint_3_req(0.0)
    , joint_4_req(0.0)
    , joint_5_req(0.0)
    , joint_6_req(0.0)  {
  (void)_alloc;
    }



   typedef double _joint_1_req_type;
  _joint_1_req_type joint_1_req;

   typedef double _joint_2_req_type;
  _joint_2_req_type joint_2_req;

   typedef double _joint_3_req_type;
  _joint_3_req_type joint_3_req;

   typedef double _joint_4_req_type;
  _joint_4_req_type joint_4_req;

   typedef double _joint_5_req_type;
  _joint_5_req_type joint_5_req;

   typedef double _joint_6_req_type;
  _joint_6_req_type joint_6_req;





  typedef boost::shared_ptr< ::jaco_fk::FKCheckRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaco_fk::FKCheckRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FKCheckRequest_

typedef ::jaco_fk::FKCheckRequest_<std::allocator<void> > FKCheckRequest;

typedef boost::shared_ptr< ::jaco_fk::FKCheckRequest > FKCheckRequestPtr;
typedef boost::shared_ptr< ::jaco_fk::FKCheckRequest const> FKCheckRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaco_fk::FKCheckRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jaco_fk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaco_fk::FKCheckRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaco_fk::FKCheckRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaco_fk::FKCheckRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "665ac09a6ac963a263289d78f765ccd4";
  }

  static const char* value(const ::jaco_fk::FKCheckRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x665ac09a6ac963a2ULL;
  static const uint64_t static_value2 = 0x63289d78f765ccd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaco_fk/FKCheckRequest";
  }

  static const char* value(const ::jaco_fk::FKCheckRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 joint_1_req\n\
float64 joint_2_req\n\
float64 joint_3_req\n\
float64 joint_4_req\n\
float64 joint_5_req\n\
float64 joint_6_req\n\
";
  }

  static const char* value(const ::jaco_fk::FKCheckRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_1_req);
      stream.next(m.joint_2_req);
      stream.next(m.joint_3_req);
      stream.next(m.joint_4_req);
      stream.next(m.joint_5_req);
      stream.next(m.joint_6_req);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FKCheckRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaco_fk::FKCheckRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaco_fk::FKCheckRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_1_req: ";
    Printer<double>::stream(s, indent + "  ", v.joint_1_req);
    s << indent << "joint_2_req: ";
    Printer<double>::stream(s, indent + "  ", v.joint_2_req);
    s << indent << "joint_3_req: ";
    Printer<double>::stream(s, indent + "  ", v.joint_3_req);
    s << indent << "joint_4_req: ";
    Printer<double>::stream(s, indent + "  ", v.joint_4_req);
    s << indent << "joint_5_req: ";
    Printer<double>::stream(s, indent + "  ", v.joint_5_req);
    s << indent << "joint_6_req: ";
    Printer<double>::stream(s, indent + "  ", v.joint_6_req);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JACO_FK_MESSAGE_FKCHECKREQUEST_H
